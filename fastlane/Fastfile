# Copyright (C) 2016 - present Instructure, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

fastlane_version '1.111.0' rescue update_fastlane
default_platform :android

require_relative 'utils/utils'

Preconditions.check_adb_on_path

platform :android do

  before_all do |lane|
    clean_bitrise_daemon
  end

  after_all do |lane|
    clean_bitrise_daemon
  end

  def last_apk
    apk = Actions.lane_context[:GRADLE_APK_OUTPUT_PATH]
    raise "Missing apk #{apk}" unless File.exist?(apk)
    apk
  end

  def all_apks
    apks = Actions.lane_context[:GRADLE_ALL_APK_OUTPUT_PATHS]
    apks.each do |apk|
      raise "Missing apk #{apk}" unless File.exist?(apk)
    end
    apks
  end

  def deploy_apk apk
    return unless bitrise
    raise "Missing apk #{apk}" unless File.exist?(apk)
    puts "Copying #{apk}"
    FileUtils.copy apk, bitrise_deploy_dir
  end

  def deploy_all_apks
    return unless bitrise
    puts 'Bitrise detected. Copying APK(s) for deployment'
    all_apks.each {|apk| deploy_apk apk}
  end

  def last_commit_info
    commit = Actions.last_non_merge_git_commit_dict
    "Commit:\n#{commit[:abbreviated_commit_hash]}\n\nAuthor:\n#{commit[:author]}\n\nMessage:\n#{commit[:message]}"
  end

  def check_signing_credentials
    raise 'Keystore path not found. Please set in BITRISEIO_ANDROID_KEYSTORE_PATH environment variable' unless ENV['BITRISEIO_ANDROID_KEYSTORE_PATH']
    raise 'Keystore password not found. Please set in BITRISEIO_ANDROID_KEYSTORE_PASSWORD environment variable' unless ENV['BITRISEIO_ANDROID_KEYSTORE_PASSWORD']
    raise 'Keystore alias not found. Please set in BITRISEIO_ANDROID_KEYSTORE_ALIAS environment variable' unless ENV['BITRISEIO_ANDROID_KEYSTORE_ALIAS']
    raise 'Key password not found. Please set in BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD environment variable' unless ENV['BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD']
  end

  # $ fastlane build app:teacher apk:app-debug.apk
  desc 'Build a specific app'
  lane :build do |options|
    raise "Please specify app name. E.g. 'fastlane build app:candroid'" unless options.has_key?(:app)
    app = options[:app]
    raise "Unrecognized app '#{app}'. " unless apps.include? app
    raise "HockeyApp API key not found. Please set in HOCKEY_API_KEY environment variable" unless ENV['HOCKEY_API_KEY']
    next if SmartBuildUtils.skippable? app
    gradle(
        project_dir: app,
        task:        'assembleDev',
        build_type:  'Debug',
        flags:       '--stacktrace'
    )
    deploy_all_apks
    ui_important "Output APK not specified! The last generated APK (#{last_apk}) will be uploaded to HockeyApp" unless options.has_key?(:apk)
    upload_apk = if options.has_key?(:apk) then
                   all_apks.detect {|apk| apk.end_with?(options[:apk])}
                 else
                   last_apk
                 end
    raise 'Missing apk' unless File.exist?(upload_apk)
    hockey(
        api_token:  ENV['HOCKEY_API_KEY'],
        apk:        upload_apk,
        strategy:   'add',
        notes:      last_commit_info,
        notes_type: '0', # Textile
        release_type: '2' # Alpha
    )
  end # lane

  # $ fastlane rc app:teacher apk:app-release.apk
  desc 'Build a release candidate and deploy to HockeyApp'
  lane :rc do |options|
    raise "Please specify app name. E.g. 'fastlane rc app:candroid'" unless options.has_key?(:app)
    app = options[:app]
    raise "Unrecognized app '#{app}'. " unless apps.include? app
    check_signing_credentials
    raise "HockeyApp API key not found. Please set in HOCKEY_API_KEY environment variable" unless ENV['HOCKEY_API_KEY']
    gradle(
        project_dir:   app,
        task:          'assembleProd',
        build_type:    'Release',
        flags:         [
                           '--stacktrace',
                           '-Pandroid.injected.signing.store.file="$BITRISEIO_ANDROID_KEYSTORE_PATH"',
                           '-Pandroid.injected.signing.store.password="$BITRISEIO_ANDROID_KEYSTORE_PASSWORD"',
                           '-Pandroid.injected.signing.key.alias="$BITRISEIO_ANDROID_KEYSTORE_ALIAS"',
                           '-Pandroid.injected.signing.key.password="$BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD"'
                       ].join(' '),
        print_command: false
    )
    deploy_all_apks
    ui_important "Output APK not specified! The last generated APK (#{last_apk}) will be uploaded to HockeyApp" unless options.has_key?(:apk)
    upload_apk = if options.has_key?(:apk) then
                   all_apks.detect {|apk| apk.end_with?(options[:apk])}
                 else
                   last_apk
                 end
    raise 'Missing apk' unless File.exist?(upload_apk)
    hockey(
        api_token:  ENV['HOCKEY_API_KEY'],
        apk:        upload_apk,
        strategy:   'add',
        notes:      last_commit_info,
        notes_type: '0', # Textile
        release_type: '0' # Beta
    )
  end

  # $ fastlane deploy app:teacher package:com.instructure.teacher apk:app-release.apk
  desc 'Build and deploy to the Play Store (alpha track)'
  lane :deploy do |options|
    raise "Missing parameter(s). E.g. 'fastlane deploy app:candroid package:com.instructure.candroid'" unless [:app, :package].all? {|key| options.has_key? key}
    app     = options[:app]
    package = options[:package]
    raise "Unrecognized app '#{app}'. " unless apps.include? app
    raise "Service account key not found: #{google_play_key}," unless File.exist?(google_play_key)
    check_signing_credentials
    gradle(
        project_dir:   app,
        task:          'assemble',
        build_type:    'Release',
        flags:         [
                           '--stacktrace',
                           '-Pandroid.injected.signing.store.file="$BITRISEIO_ANDROID_KEYSTORE_PATH"',
                           '-Pandroid.injected.signing.store.password="$BITRISEIO_ANDROID_KEYSTORE_PASSWORD"',
                           '-Pandroid.injected.signing.key.alias="$BITRISEIO_ANDROID_KEYSTORE_ALIAS"',
                           '-Pandroid.injected.signing.key.password="$BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD"'
                       ].join(' '),
        print_command: false
    )
    deploy_all_apks
    ui_important "Output APK not specified! The last generated APK (#{last_apk}) will be uploaded to Google Play" unless options.has_key?(:apk)
    upload_apk = if options.has_key?(:apk) then
                   all_apks.detect {|apk| apk.end_with?(options[:apk])}
                 else
                   last_apk
                 end
    raise 'Missing apk' unless File.exist?(upload_apk)
    supply(
        package_name:            package,
        apk:                     upload_apk,
        track:                   'alpha',
        json_key:                google_play_key,
        skip_upload_metadata:    true,
        skip_upload_images:      true,
        skip_upload_screenshots: true
    )
  end

  # $ fastlane build_all_apps
  desc 'Builds all the apps'
  lane :build_all_apps do
    apps.each {|app| build app: app}
  end # lane

  # connectedCheck won't work because it uninstalls the apks upon completion.
  desc 'Run parent Espresso tests. Example: fastlane espresso app:teacher run:2 video:true class:CoursesListPageTest method:displaysPageObjects'
  lane :espresso do |options|
    Preconditions.check_one_adb_device
    raise "Please Specify app name. E.g. 'fastlane espresso app:teacher'" unless options.has_key?(:app)
    app = options[:app]
    next if SmartBuildUtils.skippable? app

    keys       = options.keys
    valid_keys = %i[app run video class method coverage]
    abort("Invalid key. Valid keys are: #{valid_keys.join(', ')}") unless keys.all? {|e| valid_keys.include? e}

    run = options.fetch(:run, '1')
    ui_error 'Run must be a valid integer' unless run.match(/\d+/)
    run = run.to_i
    ui_error 'Run must be >= 1' unless run > 0

    video                = options.fetch(:video, false)
    coverage             = options.fetch(:coverage, false)
    valid_coverage_flags = [true, false]
    abort("Invalid coverage key. Must specify 'true' or 'false'.") unless valid_coverage_flags.include?(coverage)

    app          = select_app(app)
    app.coverage = coverage
    execute_action("Running #{app} Espresso x#{run}") do
      TestButler.install_if_missing
      app.update_device_app_apk

      1.upto(run) do |count|
        # Data must be seeded before each test run
        SoSeedy.seed(options)
        app.gradle_build_test_apk
        app.install_test_apk

        Espresso.run(app:     app.app,
                     name:    "Espresso #{app} #{count}",
                     class:   options[:class],
                     method:  options[:method],
                     package: app.ui_package,
                     runner:  app.runner,
                     video:   video)
      end
    end
  end

  desc 'Run Teacher Espresso tests on GCloud with gRPC'
  lane :teacher_gcloud_grpc do |options|
    GCloud.new(app: 'teacher').run_tests
  end

  desc 'Run Espresso tests on Google Cloud. Only works on Bitrise. fastlane espresso_gcloud app:teacher class:ProfilePageTest method:displaysPageObjects'
  lane :espresso_gcloud do |options|
    raise "Please Specify app name. E.g. 'fastlane espresso_gcloud app:teacher'" unless options.has_key?(:app)
    app          = select_app options[:app]
    app.coverage = true
    next if SmartBuildUtils.skippable? app
    test_class  = options[:class]
    test_method = options[:method]
    annotations = options[:annotations]

    # Example to run all P0s and P1s
    # fastlane espresso_gcloud app:teacher annotations:com.instructure.espresso.filters.P0,com.instructure.espresso.filters.P1
    valid_annotations = [
        'com.instructure.espresso.filters.P0',
        'com.instructure.espresso.filters.P1',
        'com.instructure.espresso.filters.P2',
        'com.instructure.espresso.filters.P3',
        'com.instructure.espresso.filters.P4'
    ]
    if annotations
      annotations.split(',').each do |annotation|
        raise "Unknown annotation #{annotation}" unless valid_annotations.include?(annotation)
      end
    end

    args          = { app: app }
    args[:class]  = test_class if test_class
    args[:method] = test_method if test_method
    SoSeedy.seed(args)
    app.gradle_clean
    app.gradle_build_app_apk
    app.gradle_build_test_apk

    args                = { app: app }
    args[:coverage]     = true
    args[:test_targets] = "class #{app.ui_package}.#{test_class}" if test_class
    args[:test_targets] += "##{test_method}" if test_class && test_method
    args[:annotations]   = annotations if annotations
    GCloud.new(args).run_tests
  end

  desc 'Run parent Unit tests on Google Cloud. Only works on Bitrise.'
  lane :parent_unit_gcloud do
    next if SmartBuildUtils.skippable? 'parent'
    Parent.gradle_build_app_apk
    Parent.gradle_build_test_apk

    GCloud.new(
        app:          'parent',
        test_targets: 'package com.instructure.parentapp.unit'
    ).run_tests
  end

  desc 'Run Robo test on Google Cloud. Only works on Bitrise.'
  lane :robo_gcloud do |options|
    app = select_app(options[:app])

    unless options[:force]
      next if SmartBuildUtils.skippable? app.app
    end

    app.gradle_build_robo_app_apk
    SoSeedy.robo(options)
    GCloud.new(
        app:  app.app,
        robo: true
    ).run_tests
  end

  desc 'Seed data into Canvas LMS for testing. Example: fastlane seed app:teacher class:CoursesListPageTest method:displaysPageObjects'
  lane :seed do |options|
    SoSeedy.seed(options)
  end

  lane :unit_tests_jvm do |options|
    raise "Please Specify app name. E.g. 'fastlane unit_tests_jvm app:parent'" unless options.has_key?(:app)
    app = options[:app]
    raise "Unrecognized app '#{app}'. " unless apps.include? app
    next if SmartBuildUtils.skippable? app
    variant = options[:variant] || ''
    flags = "-p #{app} -Pcoverage"
    gradlew "#{flags} :app:test#{variant}"
  end

end # platform :android
