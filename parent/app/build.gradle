/*
 * Copyright (C) 2016 - present  Instructure, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply from: 'jacoco.gradle' // ./gradlew testDevDebugUnitTestCoverage
apply plugin: 'com.google.gms.oss.licenses.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.uber.infer.android' // ./gradlew inferDevDebug

android {
    compileSdkVersion Versions.COMPILE_SDK
    buildToolsVersion Versions.BUILD_TOOLS

    defaultConfig {
        applicationId "com.instructure.parentapp"
        minSdkVersion Versions.MIN_SDK
        targetSdkVersion Versions.TARGET_SDK
        versionCode = 11
        versionName = "1.2.4"

        multiDexEnabled = true
        testInstrumentationRunner 'com.instructure.parentapp.ui.utils.ParentInstructureRunner'
        testInstrumentationRunnerArguments disableAnalytics: 'true'

        buildConfigField "boolean", "IS_TESTING", "false"
        buildConfigField "boolean", "IS_ROBO_TEST", "false"
        buildConfigField "String", "GAMMA_DOMAIN", "\"\""
        buildConfigField "String", "EDGE_DOMAIN", "\"\""

        /* Fields for robo test flavor */
        buildConfigField "String", "ROBO_TEST_API_KEY", "\"\""
        buildConfigField "String", "ROBO_TEST_USER_ID", "\"\""
        buildConfigField "String", "ROBO_TEST_USERNAME", "\"\""

        /* Add private data */
        buildConfigField "String", "LOGIN_CLIENT_ID", "\"$loginClientId\""
        buildConfigField "String", "LOGIN_CLIENT_SECRET", "\"$loginClientSecret\""
        addManifestPlaceholders([
                fabricApiKey:"$fabricApiKey"
        ])
    }

    flavorDimensions 'default'
    productFlavors {
        dev {
            dimension 'default'
            buildConfigField "String", "GAMMA_DOMAIN", "\"https://airwolf-iad-gamma.inscloudgate.net\""
        }

        prod {
            dimension 'default'
        }

        qa {
            dimension 'default'
            buildConfigField "boolean", "IS_TESTING", "true"
            buildConfigField "String", "GAMMA_DOMAIN", "\"https://airwolf-iad-gamma.inscloudgate.net\""
            buildConfigField "String", "EDGE_DOMAIN", "\"https://airwolf-edge.inseng.net\""
        }

        robo {
            dimension 'default'
            buildConfigField "boolean", "IS_ROBO_TEST", "true"
            buildConfigField "String", "ROBO_TEST_API_KEY", "\"$roboTestApiKey\""
            buildConfigField "String", "ROBO_TEST_USER_ID", "\"$roboTestUserId\""
            buildConfigField "String", "ROBO_TEST_USERNAME", "\"$roboTestUsername\""
            buildConfigField "String", "GAMMA_DOMAIN", "\"https://airwolf-iad-gamma.inscloudgate.net\""
            buildConfigField "String", "EDGE_DOMAIN", "\"https://airwolf-edge.inseng.net\""
        }
    }

    buildTypes {
        debug {
            // ./gradlew -Pcoverage :app:assembleQaDebug :app:assembleQaDebugAndroidTest
            // ./gradlew :app:connectedQaDebugAndroidTest
            // ./gradlew :app:createQaDebugCoverageReport
            testCoverageEnabled = project.hasProperty('coverage')
            minifyEnabled false
            shrinkResources false
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_TESTING", "false"
            buildConfigField "String", "GAMMA_DOMAIN", "\"\""
            buildConfigField "String", "EDGE_DOMAIN", "\"\""
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
        // Required for Espresso.
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize '2g'
    }

    /*
    All direct/transitive dependencies shared between your test and production APKs need to be
    excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
    excluding these dependencies from your test configuration will result in an dex pre-verifier error
    at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
    https://github.com/googlecodelabs/android-testing/blob/49e2cf7584b7aee421630da07350d6e4ca2fe6f7/app/build.gradle#L91
    */
    configurations.implementation.dependencies.each { compileDependency ->
        println "Excluding implementation dependency: ${compileDependency.getName()}"
        configurations.androidTestImplementation.dependencies.each { androidTestCompileDependency ->
            configurations.androidTestImplementation.exclude module: "${compileDependency.getName()}"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /* Modules */
    implementation project(path: ':login-api-2')

    /* Butter Knife */
    implementation 'com.jakewharton:butterknife:8.8.1'
    kapt 'com.jakewharton:butterknife-compiler:8.8.1'

    /* Material Dependency */
    implementation 'com.github.rey5137:material:1.2.2'

    /* Open Source Licensing Dependency */
    implementation Libs.PLAY_SERVICES_OSS_LICENSES

    /* Android Test Dependencies */
    androidTestImplementation Libs.JUNIT
    androidTestImplementation project(':espresso')
    //Needed for espresso test recorder
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    /* Unit Test Dependencies */
    testImplementation project(':espresso')
    testImplementation Libs.JUNIT
    testImplementation Libs.ROBOLECTRIC

    /* Crashlytics */
    implementation(Libs.CRASHLYTICS) {
        transitive = true
    }

    /* Support Dependencies */
    implementation Libs.SUPPORT_DESIGN
    implementation Libs.SUPPORT_PERCENT
    implementation Libs.SUPPORT_CARDVIEW
}

// ./gradlew -Pcoverage firebaseJacoco
task firebaseJacoco(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Firebase test lab."

    def flavor = 'qa'

    classDirectories = fileTree(
            dir: "${project.buildDir}/intermediates/classes/${flavor}",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    // project.buildDir is /android-uno/parent/app/build
    sourceDirectories = files(['src/main/java'].plus(android.sourceSets[flavor].java.srcDirs))
    executionData = files("${project.buildDir}/firebase.ec")

    reports {
        // default path: /android-uno/parent/app/build/reports/jacoco/firebaseJacoco/html/
        html.enabled true
        csv.enabled  false
        xml.enabled  false
    }
}
