/*
 * Copyright (C) 2017 - present Instructure, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

static String isTesting() {
    if ( System.getenv("IS_TESTING") == "true" ) {
        "true"
    } else {
        "false"
    }
}

android {
    compileSdkVersion Versions.COMPILE_SDK
    buildToolsVersion Versions.BUILD_TOOLS

    defaultConfig {
        minSdkVersion Versions.MIN_SDK
        targetSdkVersion Versions.TARGET_SDK
        buildConfigField "boolean", "IS_TESTING", isTesting()
    }

    buildTypes {
        debug{
            debuggable true
            minifyEnabled false
            shrinkResources false
            buildConfigField 'boolean', 'IS_DEBUG', 'true'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release{
            debuggable false
            minifyEnabled false
            shrinkResources false
            buildConfigField 'boolean', 'IS_DEBUG', 'false'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /* Modules */
    api project(path: ':blueprint')

    /* Kotlin */
    implementation Libs.KOTLIN_STD_LIB

    /* PaperParcel */
    api 'nz.bradcampbell:paperparcel:2.0.2'
    api 'nz.bradcampbell:paperparcel-kotlin:2.0.2'
    kapt 'nz.bradcampbell:paperparcel-compiler:2.0.2'

    /* Custom Views */
    implementation 'com.github.flavienlaurent.datetimepicker:library:0.0.2'
    api 'com.getbase:floatingactionbutton:1.10.0'

    /* Test Dependencies */
    testImplementation Libs.JUNIT

    /* Butterknife */
    implementation 'com.jakewharton:butterknife:8.8.1'
    kapt 'com.jakewharton:butterknife-compiler:8.8.1'

    /* Media handling */
    api 'com.github.bumptech.glide:glide:4.1.1'
    api "com.github.bumptech.glide:okhttp3-integration:4.1.1"
    kapt 'com.github.bumptech.glide:compiler:4.1.1'
    api 'com.caverock:androidsvg:1.2.1'
    api 'com.squareup.picasso:picasso:2.5.2'
    api 'de.hdodenhof:circleimageview:2.0.0'
    api 'com.davemorrissey.labs:subsampling-scale-image-view:3.7.0'


    /* Crashlytics */
    implementation(Libs.CRASHLYTICS) {
        transitive = true
    }

    /* Support Dependencies */
    implementation Libs.SUPPORT_ANNOTATION
    implementation Libs.SUPPORT_APPCOMPAT
    implementation Libs.SUPPORT_CARDVIEW
    implementation Libs.SUPPORT_DESIGN
    implementation Libs.PLAY_SERVICES

    api 'com.android.support.constraint:constraint-layout:1.0.2'

    /* Job Scheduler */
    compile 'com.firebase:firebase-jobdispatcher:0.8.5'
}

kotlin {
    experimental {
        coroutines "enable"
    }
}
