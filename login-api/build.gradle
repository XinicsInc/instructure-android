/*
 * Copyright (C) 2016 - present Instructure, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.google.com' }
}

buildscript {
    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.google.com' }
    }
    dependencies {
        // https://bintray.com/android/android-tools/com.android.tools.build.gradle/view
        classpath "com.android.tools.build:gradle:$GLOBAL_GRADLE_TOOLS_VERSION"
    }
}

apply plugin: 'com.android.library'
apply from: '../private-data/merge-private-data.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName


        /* Add private data */
        mergePrivateData "login-api"
        def privateProps = new Properties()
        privateProps.load(new FileInputStream("$projectDir/private.properties"))
        buildConfigField "String", "ZENDESK_DOMAIN", "\"${privateProps.zendeskDomain}\""
        buildConfigField "String", "ZENDESK_CREDENTIALS", "\"${privateProps.zendeskCredentials}\""
        buildConfigField "String", "ANONYMOUS_SCHOOL_DOMAIN", "\"${privateProps.anonymousSchoolDomain}\""
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}


configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
}

dependencies {
    compile project(':canvas-api')
    compile project(':pandautils')
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile('com.mobprofs:retrofit-simplexmlconverter:1.0') {
        exclude module: 'stax'
        exclude module: 'stax-api'
        exclude module: 'xpp3'
    }
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.7.5'
    compile 'com.squareup.okio:okio:1.12.0'
    compile 'com.squareup.okhttp3:okhttp:3.7.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.amazonaws:aws-android-sdk-s3:2.1.4'
    compile 'com.amazonaws:aws-android-sdk-core:2.1.4'
    compile 'de.hdodenhof:circleimageview:2.0.0'

    compile rootProject.ext.supportDependencies.appCompat
    compile rootProject.ext.supportDependencies.cardView
}

task copySnickerDoodles(type: Copy) {
    println("Copying Snicker Doodles")

    String baseDir = "$rootDir/../../"
    def snickerFileName = "snickers.json"

    File snickers = new File("$baseDir/$snickerFileName")

    if(snickers.exists()) {
        String dest = "$rootDir/../login-api/src/main/res/raw"

        File destDirFile = new File("$dest");
        if(!destDirFile.exists()) {
            destDirFile.mkdir();
        }

        File dst = new File("$dest/$snickerFileName")

        if (!dst.exists()) {
            dst.createNewFile()
            dst << snickers.bytes
        } else if (!md5(snickers).equals(md5(dst))) {
            dst.delete()
            dst << snickers.bytes
        }

        println("Snicker Doodles Ready to Consume")
    } else {
        println("Snicker Doodles Do Not Currently Exist")
    }
}

